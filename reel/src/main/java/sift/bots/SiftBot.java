package main.java.sift.bots;

import main.java.sift.AfishaParser;
import main.java.sift.PropertiesLoader;
import main.java.sift.Session;
import main.java.sift.filters.Filters;
import main.java.sift.filters.LlmFilter;
import main.java.sift.filters.TimeFilter;
import org.telegram.telegrambots.client.okhttp.OkHttpTelegramClient;
import org.telegram.telegrambots.longpolling.util.LongPollingSingleThreadUpdateConsumer;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import static main.java.sift.AfishaParser.parseTodayFilms;

public class SiftBot implements LongPollingSingleThreadUpdateConsumer {
    private final TelegramClient telegramClient = new OkHttpTelegramClient(PropertiesLoader.get("tgApiKey"));

    private enum UserState {
        AWAITING_TIME,
        AWAITING_EXCLUDED,
        AWAITING_MANDATORY,
        AWAITING_AI,
        EDITING_FILTERS,
        SEARCHING,
        IDLE
    }

    private final Map<Long, UserState> userStates = new ConcurrentHashMap<>();
    private final Map<Long, String> timeFilters = new ConcurrentHashMap<>();
    private final Map<Long, String> excludedGenres = new ConcurrentHashMap<>();
    private final Map<Long, String> mandatoryGenres = new ConcurrentHashMap<>();
    private final Map<Long, String> aiPrompts = new ConcurrentHashMap<>();

    private static final String TIME_TRIGGER = "–ó–∞–¥–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ–∞–Ω—Å–∞";
    private static final String TIME_FILTER_GUIDE = "–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–µ–∞–Ω—Å–∞" +
        " –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 18:30-23:30";

    private static final String EXCLUDED_TRIGGER = "–ó–∞–¥–∞—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã";
    private static final String EXCLUDED_FILTER_GUIDE = "–£–∫–∞–∂–∏—Ç–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–º–µ–¥–∏—è, –º–µ–ª–æ–¥—Ä–∞–º–∞";

    private static final String MANDATORY_TRIGGER = "–ó–∞–¥–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã";
    private static final String MANDATORY_GUIDE = "–£–∫–∞–∂–∏—Ç–µ –∂–∞–Ω—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –¢—Ä–∏–ª–ª–µ—Ä, –¥—Ä–∞–º–∞\n";

    private static final String AI_TRIGGER = "–î–æ–±–∞–≤–∏—Ç—å AI-—Ñ–∏–ª—å—Ç—Ä";
    private static final String AI_GUIDE = "–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∑–∞–ø—Ä–æ—Å–∞ –∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É.\n" +
        "–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: –Ø —Ö–æ—á—É —Å—Ö–æ–¥–∏—Ç—å –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å...";

    private static final String EDIT_TRIGGER = "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã";
    private static final String EDIT_GUIDE = "–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞.\n";

    private static final String SEARCH_TRIGGER = "–ü–æ–∏—Å–∫!";
    private static final String SEARCH_GUIDE = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...\n";

    private static final String EDIT_TIME = "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è";
    private static final String EDIT_EXCLUDED = "–ò–∑–º–µ–Ω–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è";
    private static final String EDIT_MANDATORY = "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è";
    private static final String EDIT_AI = "–ò–∑–º–µ–Ω–∏—Ç—å AI-–∑–∞–ø—Ä–æ—Å";
    private static final String BACK_COMMAND = "üîô –ù–∞–∑–∞–¥";

    private static final Set<String> MAIN_COMMANDS = Set.of(
        TIME_TRIGGER, EXCLUDED_TRIGGER, MANDATORY_TRIGGER,
        AI_TRIGGER, EDIT_TRIGGER, SEARCH_TRIGGER
    );

    private static final Set<String> EDIT_COMMANDS = Set.of(
        EDIT_TIME, EDIT_EXCLUDED, EDIT_MANDATORY, EDIT_AI, BACK_COMMAND
    );

    private static final Set<String> TRIGGERS = Set.of(
        TIME_TRIGGER,
        EXCLUDED_TRIGGER,
        MANDATORY_TRIGGER,
        AI_TRIGGER
    );

    @Override
    public void consume(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) {
            return;
        }
        final long chatId = update.getMessage().getChatId();
        final String chatIdString = String.valueOf(chatId);
        final String text = update.getMessage().getText();
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if (MAIN_COMMANDS.contains(text)) {
            handleMainCommand(chatId, chatIdString, text);
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        else if (EDIT_COMMANDS.contains(text)) {
            handleEditCommand(chatId, chatIdString, text);
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        else {
            handleUserInput(chatId, chatIdString, text);
        }
    }

    private void handleMainCommand(long chatId, String chatIdStr, String command) {
        switch (command) {
            case EXCLUDED_TRIGGER:
                this.userStates.put(chatId, UserState.AWAITING_EXCLUDED);
                this.showMainKeyboard(chatIdStr, EXCLUDED_FILTER_GUIDE);
                break;

            case MANDATORY_TRIGGER:
                this.userStates.put(chatId, UserState.AWAITING_MANDATORY);
                this.showMainKeyboard(chatIdStr, MANDATORY_GUIDE);
                break;

            case TIME_TRIGGER:
                this.userStates.put(chatId, UserState.AWAITING_TIME);
                this.showMainKeyboard(chatIdStr, TIME_FILTER_GUIDE);
                break;

            case AI_TRIGGER:
                this.userStates.put(chatId, UserState.AWAITING_AI);
                this.showMainKeyboard(chatIdStr, AI_GUIDE);
                break;

            case EDIT_TRIGGER:
                this.userStates.put(chatId, UserState.EDITING_FILTERS);
                this.showEditMenu(chatIdStr);
                break;

            case SEARCH_TRIGGER:
                this.userStates.put(chatId, UserState.SEARCHING);
                try {
                    this.startSearch(chatIdStr, chatId);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
                break;

            default:
                showMainKeyboard(chatIdStr, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
        }
    }

    private void handleUserInput(long chatId, String chatIdStr, String input) {
        UserState state = userStates.getOrDefault(chatId, UserState.IDLE);

        switch (state) {
            case AWAITING_EXCLUDED:
                this.excludedGenres.put(chatId, input);
                this.userStates.put(chatId, UserState.IDLE);
                this.showMainKeyboard(chatIdStr, "‚úÖ –ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: " + input);
                break;

            case AWAITING_MANDATORY:
                this.mandatoryGenres.put(chatId, input);
                this.userStates.put(chatId, UserState.IDLE);
                this.showMainKeyboard(chatIdStr, "‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: " + input);
                break;

            case AWAITING_TIME:
                this.timeFilters.put(chatId, input);
                this.userStates.put(chatId, UserState.IDLE);
                this.showMainKeyboard(chatIdStr, "‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: " + input);
                break;

            case AWAITING_AI:
                this.aiPrompts.put(chatId, input);
                this.userStates.put(chatId, UserState.IDLE);
                this.showMainKeyboard(chatIdStr, "‚úÖ AI-–∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç: " + input);
                break;

            default:
                showMainKeyboard(chatIdStr, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:");
        }
    }

    private void handleEditCommand(long chatId, String chatIdStr, String command) {
        switch (command) {
            case EDIT_EXCLUDED:
                userStates.put(chatId, UserState.AWAITING_EXCLUDED);
                String currentExcluded = excludedGenres.getOrDefault(chatId, "–Ω–µ –∑–∞–¥–∞–Ω—ã");
                showMainKeyboard(chatIdStr, "–¢–µ–∫—É—â–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: " + currentExcluded + "\n\n" + EXCLUDED_FILTER_GUIDE);
                break;

            case EDIT_MANDATORY:
                userStates.put(chatId, UserState.AWAITING_MANDATORY);
                String currentMandatory = mandatoryGenres.getOrDefault(chatId, "–Ω–µ –∑–∞–¥–∞–Ω—ã");
                showMainKeyboard(chatIdStr, "–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: " + currentMandatory + "\n\n" + MANDATORY_GUIDE);
                break;

            case EDIT_TIME:
                userStates.put(chatId, UserState.AWAITING_TIME);
                String currentTime = timeFilters.getOrDefault(chatId, "–Ω–µ –∑–∞–¥–∞–Ω–æ");
                showMainKeyboard(chatIdStr, "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: " + currentTime + "\n\n" + TIME_FILTER_GUIDE);
                break;

            case EDIT_AI:
                userStates.put(chatId, UserState.AWAITING_AI);
                String currentAI = aiPrompts.getOrDefault(chatId, "–Ω–µ –∑–∞–¥–∞–Ω");
                showMainKeyboard(chatIdStr, "–¢–µ–∫—É—â–∏–π AI-–∑–∞–ø—Ä–æ—Å: " + currentAI + "\n\n" + AI_GUIDE);
                break;

            case BACK_COMMAND:
                userStates.put(chatId, UserState.IDLE);
                showMainKeyboard(chatIdStr, "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                break;
        }
    }

    private void showCurrentFilters(final String chatIdString, final long chatId) {
        final StringBuilder sb = new StringBuilder(EDIT_GUIDE);
        int i = 0;
        if (excludedGenres.containsKey(chatId)) {
            sb.append("\n").append(++i).append("üö´ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∂–∞–Ω—Ä—ã: ").append(excludedGenres.get(chatId));
        }
        if (mandatoryGenres.containsKey(chatId)) {
            sb.append("\n").append(++i).append("‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã: ").append(mandatoryGenres.get(chatId));
        }

        showMainKeyboard(chatIdString, sb.toString());
    }

    private void sendMessage(final String chatId, final String message) {
        final SendMessage sendMessage = new SendMessage(chatId, message);
        try {
            this.telegramClient.execute(sendMessage);
        } catch (TelegramApiException tgApiEx) {
            tgApiEx.printStackTrace();
        }
    }

    private void sendMessage(final SendMessage message) {
        try {
            this.telegramClient.execute(message);
        } catch (TelegramApiException tgApiEx) {
            tgApiEx.printStackTrace();
        }
    }

    public void showMainKeyboard(final String chatId, final String message) {
        final SendMessage sendMessage = new SendMessage(chatId, message);
        final List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        // TODO:: Add emojis
        row.add(TIME_TRIGGER);
        row.add(EXCLUDED_TRIGGER);
        row.add(MANDATORY_TRIGGER);
        keyboard.add(row);
        row = new KeyboardRow();
        row.add(AI_TRIGGER);
        row.add("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã");
        row.add("–ü–æ–∏—Å–∫!");
        keyboard.add(row);
        final ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup(keyboard);
        sendMessage.setReplyMarkup(keyboardMarkup);
        this.sendMessage(sendMessage);
    }

    private void showEditMenu(final String chatIdStr) {
        final long chatId = Long.parseLong(chatIdStr);
        final StringBuilder sb = new StringBuilder("‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n");
        sb.append("\n‚è∞ <b>–í—Ä–µ–º—è:</b> ").append(this.timeFilters.getOrDefault(chatId, "–Ω–µ –∑–∞–¥–∞–Ω–æ"));
        sb.append("\nüö´ <b>–ò—Å–∫–ª—é—á–µ–Ω–∏—è:</b> ").append(this.excludedGenres.getOrDefault(chatId, "–Ω–µ –∑–∞–¥–∞–Ω—ã"));
        sb.append("\n‚úÖ <b>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:</b> ").append(this.mandatoryGenres.getOrDefault(chatId, "–Ω–µ –∑–∞–¥–∞–Ω—ã"));
        sb.append("\nü§ñ <b>AI-–∑–∞–ø—Ä–æ—Å:</b> ").append(this.aiPrompts.getOrDefault(chatId, "–Ω–µ –∑–∞–¥–∞–Ω"));

        final SendMessage message = new SendMessage(chatIdStr, sb.toString());
        message.setParseMode("HTML");

        final List<KeyboardRow> keyboard = new ArrayList<>();
        final KeyboardRow row1 = new KeyboardRow();
        row1.add(EDIT_TIME);
        row1.add(EDIT_EXCLUDED);

        final KeyboardRow row2 = new KeyboardRow();
        row2.add(EDIT_MANDATORY);
        row2.add(EDIT_AI);

        final KeyboardRow row3 = new KeyboardRow();
        row3.add(BACK_COMMAND);

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        final ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        message.setReplyMarkup(keyboardMarkup);
        this.sendMessage(message);
    }

    private void startSearch(final String chatIdString, final long chatId) throws IOException {
        final Filters filters = new Filters();
        if (this.timeFilters.containsKey(chatId)) {
            final TimeFilter timeFilter = new TimeFilter(
                this.timeFilters.get(chatId).split("-")[0],
                this.timeFilters.get(chatId).split("-")[1]
            );
            filters.addFilter(timeFilter);
        }
        if (this.mandatoryGenres.containsKey(chatId)) {
            // TODO::
        }
        if (this.excludedGenres.containsKey(chatId)) {
            // TODO::
        }
        if (this.aiPrompts.containsKey(chatId)) {
            final LlmFilter llmFilter = new LlmFilter(this.aiPrompts.get(chatId));
            filters.addFilter(llmFilter);
        }
        final AfishaParser parser = new AfishaParser();
        final Map<String, String> films = parseTodayFilms();
        final List<Session> sessions = new ArrayList<>();
        for (final Map.Entry<String, String> entry : films.entrySet()) {
            sessions.addAll(parser.parseSchedule(entry.getValue()));
        }
        final List<Session> filtered = filters.filter(sessions);
        sendMessage(chatIdString, "Found " + filtered.size());
        // TODO:: output
    }
}